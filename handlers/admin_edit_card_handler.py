from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from config_data.config import Config, load_config
from keyboards.admin_edit_card_keyboard import create_keyboard_list, keyboard_details_edit, keyboards_edit_attribute, \
    keyboard_full_text, keyboard_full_text_1
from keyboards.admin_main_keyboards import keyboards_start_admin

from database import requests as rq
from database.models import Place
from filter.admin_filter import IsSuperAdmin


import logging

router = Router()
router.message.filter(IsSuperAdmin())
router.callback_query(IsSuperAdmin())
config: Config = load_config()


class Admin(StatesGroup):
    update_attribute = State()


@router.message(F.text == 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É')
async def process_edit_card(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ—Å—Ç (–≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Å—Ç)
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_edit_card: {message.chat.id}')
    await state.clear()
    list_category: list[Place] = await rq.get_list_category()
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å',
                         reply_markup=create_keyboard_list(list_name_button=list_category,
                                                           str_callback='editcategory'))


@router.callback_query(F.data == 'top_category')
async def process_top_category(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–≤–Ω–æ–π 0, —É–≤–µ–ª–∏—á–∏–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞ 1 (–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π)
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_top_category: {callback.message.chat.id} {callback.data}')
    data = await state.get_data()
    await rq.set_position_category(category=data['category'])
    await callback.answer(text='–ü–æ–∑–∏—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', show_alert=True)


@router.callback_query(F.data == 'top_sub_category')
async def process_top_sub_category(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–≤–Ω–æ–π 0, —É–≤–µ–ª–∏—á–∏–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞ 1
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_top_sub_category: {callback.message.chat.id} {callback.data}')
    data = await state.get_data()
    await rq.set_position_sub_category(category=data['category'], sub_category=data['subcategory'])
    await callback.answer(text=f'–ü–æ–∑–∏—Ü–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {data["subcategory"]} –æ–±–Ω–æ–≤–ª–µ–Ω–∞', show_alert=True)


@router.callback_query(F.data.startswith('editcategory'))
async def process_select_category_card(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–ê–¢–ï–ì–û–†–ò–Ø" –≤—ã–≤–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_category_card: {callback.message.chat.id}')
    list_subcategory: list[Place] = await rq.get_list_subcategory(callback.data.split(':')[1])
    await state.update_data(category=callback.data.split(':')[1])
    # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –µ—Å—Ç—å
    if list_subcategory != ['none']:
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                                         reply_markup=create_keyboard_list(list_name_button=list_subcategory,
                                                                           str_callback='editsubcategory'))
    # –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏ —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç
    else:
        list_card = await rq.get_list_card(category=callback.data.split(':')[1],
                                           sub_category='none')
        list_title_card = []
        list_id_card = []
        for card in list_card:
            list_title_card.append(card["title"])
            list_id_card.append(card["id_place"])
        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                                         reply_markup=create_keyboard_list(list_name_button=list_title_card,
                                                                           str_callback='edittitle_card',
                                                                           list_id_button=list_id_card))
    await callback.answer()


@router.callback_query(F.data.startswith('editsubcategory'))
async def process_select_category_card(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–û–î–ö–ê–¢–ï–ì–û–†–ò–Ø"
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_category_card: {callback.message.chat.id}')
    await state.update_data(subcategory=callback.data.split(':')[1])
    data = await state.get_data()
    list_card: list[Place] = await rq.get_list_card(data['category'],
                                                    data['subcategory'])
    list_title_card = []
    list_id_card = []
    if list_card:
        for card in list_card:
            list_title_card.append(card["title"])
            list_id_card.append(card["id_place"])
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                                     reply_markup=create_keyboard_list(list_name_button=list_title_card,
                                                                       str_callback='edittitle_card',
                                                                       list_id_button=list_id_card))


@router.callback_query(F.data.startswith('edittitle_card'))
async def process_select_title_card(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–æ–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ú–ï–°–¢–û", –≤—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –ú–ï–°–¢–ê –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–µ –ø–æ–ª–µ–π
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_select_title_card: {callback.message.chat.id}')
    await state.update_data(title=callback.data.split(":")[1])
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    card: Place = await rq.info_card(int(callback.data.split(":")[1]))
    await state.update_data(id_card=card.id)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
    media = []
    list_image: list = card.list_image.split(',')
    for image in list_image:
        media.append(InputMediaPhoto(media=image))
    await callback.message.answer_media_group(media=media)
    await callback.message.answer(text=f'<b>{card.title}</b>\n'
                                       f'{card.short_description}',
                                  reply_markup=keyboard_details_edit(card.id),
                                  parse_mode='html')
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                                  reply_markup=keyboards_edit_attribute())


@router.callback_query(F.data.startswith('details_edit:'))
async def process_details(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–ó–ù–ê–¢–¨ –ë–û–õ–¨–®–ï", –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
    :param callback:
    :return:
    """
    logging.info(f'process_details: {callback.message.chat.id}')
    id_card = callback.data.split(':')[1]
    card: Place = await rq.info_card(id_card=int(id_card))
    if card.instagram != 'none':
        await callback.message.edit_text(text=f'<b>{card.title}</b>\n'
                                              f'{card.long_description}\n'
                                              f'<i>{card.address}</i>',
                                         reply_markup=keyboard_full_text(card.yandex_map, card.instagram),
                                         parse_mode='html')
    else:
        await callback.message.edit_text(text=f'<b>{card.title}</b>\n'
                                              f'{card.long_description}\n'
                                              f'<i>{card.address}</i>',
                                         reply_markup=keyboard_full_text_1(card.yandex_map),
                                         parse_mode='html')


@router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def process_back_menu(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", –≤—ã—Ö–æ–¥–∏–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    :param message:
    :return:
    """
    logging.info(f'process_back_menu: {message.chat.id}')
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',
                         reply_markup=keyboards_start_admin())


@router.message(lambda message: message.text in ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', '–ê–¥—Ä–µ—Å',
                                                 '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü–æ–¥–Ω—è—Ç—å –≤ TOP'])
async def process_update_card(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—è –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_update_card: {message.chat.id}')
    await state.set_state(Admin.update_attribute)
    await state.update_data(attribute=message.text)
    if message.text == '–ù–∞–∑–≤–∞–Ω–∏–µ':
        await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
    elif message.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
        await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
    elif message.text == '–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ':
        await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    elif message.text == '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ':
        await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    elif message.text == '–ê–¥—Ä–µ—Å':
        await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å')
    elif message.text == '–ü–æ–¥–Ω—è—Ç—å –≤ TOP':
        data = await state.get_data()
        if 'subcategory' not in data.keys():
            await rq.set_position_card(category=data['category'],
                                       sub_category='none',
                                       id_card=int(data['id_card']))
        else:
            await rq.set_position_card(category=data['category'],
                                       sub_category=data['subcategory'],
                                       id_card=int(data['id_card']))
        await message.answer(text='–ü–æ–∑–∏—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')


@router.message(F.text, StateFilter(Admin.update_attribute))
async def process_update_card(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    :param message:
    :param state:
    :return:
    """
    logging.info(f'process_update_card: {message.chat.id}')
    data = await state.get_data()
    attribute = data['attribute']
    if attribute == '–ù–∞–∑–≤–∞–Ω–∏–µ':
        await rq.set_attribute_card(attribute='title',
                                    set_attribute=message.text,
                                    id_card=int(data['id_card']))
        await message.answer(text='–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    elif attribute == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
        await rq.set_attribute_card(attribute='category',
                                    set_attribute=message.text,
                                    id_card=int(data['id_card']))
        await message.answer(text='–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    elif attribute == '–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ':
        await rq.set_attribute_card(attribute='short_description',
                                    set_attribute=message.text,
                                    id_card=int(data['id_card']))
        await message.answer(text='–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    elif attribute == '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ':
        await rq.set_attribute_card(attribute='long_description',
                                    set_attribute=message.text,
                                    id_card=int(data['id_card']))
        await message.answer(text='–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    elif attribute == '–ê–¥—Ä–µ—Å':
        await rq.set_attribute_card(attribute='address',
                                    set_attribute=message.text,
                                    id_card=int(data['id_card']))
        await message.answer(text='–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
